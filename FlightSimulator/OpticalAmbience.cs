// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{

    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class OpticalAmbience
    {
        public double iris;

        public ArrayList lights;

        public OpticalAmbience()
        {
            iris = 1.0D;
            lights = new ArrayList();
        }

        public OpticalAmbience(OpticalAmbience oa)
        {
            iris = 1.0D;
            lights = new ArrayList();
            iris = oa.iris;
            for (int i = 0; i < NLights(); i++)
                AddLight(oa.GetLight(i));
        }

        public int NLights()
        {
            return lights.Count;
        }

        public Light GetLight(int i)
        {
            return (Light)lights[i];
        }

        public void AddLight(Light l)
        {
            lights.Add(l);
        }

        public void SetLight(int i, Light l)
        {
            lights[i] = l;
        }

        public void RemoveLight(int i)
        {
			//ILOG.J2CsMapping.Collections.Collections.RemoveAt(lights,i);
		}

        public LightColor Brightness(Vector3D eyePos, Vector3D pos,
                Vector3D normal, Material mate)
        {
            LightColor ret = new LightColor(0.0D, 0.0D, 0.0D);
            for (int i = 0; i < NLights(); i++)
            {
                ret = ret.Add(GetLight(i).CalcBrightness(eyePos, pos, normal, mate));
            }
            ret = ret.Add(mate.radiation).Mult(iris);
            return ret;
        }

        public OpticalAmbience Transform(Matrix44 mat)
        {
            OpticalAmbience ret = new OpticalAmbience(this);
            for (int i = 0; i < NLights(); i++)
            {
                ret.SetLight(i, ret.GetLight(i).Transform(mat));
            }
            return ret;
        }

        public void Print()
        {
            System.Console.Out.WriteLine("OpticalAmbience {");
            System.Console.Out.WriteLine("\tIris=" + DispFormat.DoubleFormat(iris, 3));
            for (int i = 0; i < NLights(); i++)
                GetLight(i).Print();
        }
    }
}