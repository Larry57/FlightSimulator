// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Util
{

    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class Angle
    {
        public const int MODE_0_2PI = 0;
        public const int MODE_mPI_PI = 1;
        public int correct_mode;
        public double value_ren;

        public Angle(int mode)
        {
            value_ren = 0.0D;
            SetMode(mode);
            SetValue(0.0D);
        }

        public Angle(double val, int mode)
        {
            value_ren = 0.0D;
            SetMode(mode);
            SetValue(val);
        }

        public void Correct()
        {
            if (correct_mode == 0)
            {
                while (value_ren < 0.0D)
                    value_ren += 6.283185307179586D;
                while (value_ren >= 6.283185307179586D)
                    value_ren -= 6.283185307179586D;
            }
            else
            {
                while (value_ren < -Math.PI)
                    value_ren += 6.283185307179586D;
                while (value_ren >= Math.PI)
                    value_ren -= 6.283185307179586D;
            }
        }

        public double SetValue(double val)
        {
            value_ren = val;
            Correct();
            return GetValue();
        }

        public double GetValue()
        {
            Correct();
            return value_ren;
        }

        public double GetValue(int mode)
        {
            int modebak = correct_mode;

            SetMode(mode);
            double ret = GetValue();
            SetMode(modebak);
            return ret;
        }

        public void SetMode(int mode)
        {
            correct_mode = mode;
            Correct();
        }

        public Angle Set(Angle a)
        {
            value_ren = a.value_ren;
            correct_mode = a.correct_mode;
            Correct();
            return this;
        }

        public Angle Add(double val)
        {
            value_ren += val;
            Correct();
            return this;
        }

        public Angle Add(Angle a)
        {
            value_ren += a.value_ren;
            Correct();
            return this;
        }

        public Angle Sub(double val)
        {
            value_ren -= val;
            Correct();
            return this;
        }

        public Angle Sub(Angle a)
        {
            value_ren -= a.value_ren;
            Correct();
            return this;
        }

        public Angle Reverse()
        {
            value_ren += Math.PI;
            Correct();
            return this;
        }

        public Angle TargetTrack(Angle target, double delta, double lockErr)
        {
            Angle err = new Angle(1);

            err.Set(target);
            err.SetMode(1);
            double dErr = err.Sub(this).GetValue();
            if (dErr > 0.0D)
            {
                if (dErr > delta)
                {
                    Add(delta);
                }
                else
                {
                    SetValue(target.GetValue());
                    Correct();
                }
            }
            if (dErr < 0.0D)
            {
                if (-dErr > delta)
                {
                    Sub(delta);
                }
                else
                {
                    SetValue(target.GetValue());
                    Correct();
                }
            }
            err.Set(target);
            err.SetMode(1);
            dErr = err.Sub(this).GetValue();
            if (Math.Abs(dErr) <= lockErr)
            {
                SetValue(target.GetValue());
            }
            return this;
        }
    }
}