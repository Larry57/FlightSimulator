// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{

    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;


    public class BoundingBox
    {
        internal Vector3D pMin;

        internal Vector3D pMax;

        public BoundingBox()
        {
            pMin = null;
            pMax = null;
        }

        public BoundingBox(double xmin, double ymin, double zmin, double xmax,
                double ymax, double zmax)
        {
            pMin = null;
            pMax = null;
            pMin = new Vector3D(xmin, ymin, zmin);
            pMax = new Vector3D(xmax, ymax, zmax);
        }

        public BoundingBox(Vector3D p0, Vector3D p1)
        {
            pMin = null;
            pMax = null;
            if ((p0 != null) && (p1 != null))
            {
                pMin = new Vector3D(p0);
                pMax = new Vector3D(p1);
            }
        }

        public double GetMinX()
        {
            if (pMin != null)
                return pMin.x;
            return 0.0D;
        }

        public double GetMinY()
        {
            if (pMin != null)
                return pMin.y;
            return 0.0D;
        }

        public double GetMinZ()
        {
            if (pMin != null)
                return pMin.z;
            return 0.0D;
        }

        public double GetMaxX()
        {
            if (pMax != null)
                return pMax.x;
            return 0.0D;
        }

        public double GetMaxY()
        {
            if (pMax != null)
                return pMax.y;
            return 0.0D;
        }

        public double GetMaxZ()
        {
            if (pMax != null)
                return pMax.z;
            return 0.0D;
        }

        public double XSize()
        {
            if (pMin != null)
                return pMax.x - pMin.x;
            return 0.0D;
        }

        public double YSize()
        {
            if (pMin != null)
                return pMax.y - pMin.y;
            return 0.0D;
        }

        public double ZSize()
        {
            if (pMin != null)
                return pMax.z - pMin.z;
            return 0.0D;
        }

        public void Set(double xmin, double ymin, double zmin, double xmax,
                double ymax, double zmax)
        {
            if (pMin != null)
            {
                pMin.SetVec(xmin, ymin, zmin);
                pMax.SetVec(xmax, ymax, zmax);
            }
            else
            {
                pMin = new Vector3D(xmin, ymin, zmin);
                pMax = new Vector3D(xmax, ymax, zmax);
            }
        }

        public void Set(Vector3D p0, Vector3D p1)
        {
            if ((p0 != null) && (p1 != null))
                if (pMin != null)
                {
                    pMin.SetVec(p0);
                    pMax.SetVec(p1);
                }
                else
                {
                    pMin = new Vector3D(p0);
                    pMax = new Vector3D(p1);
                }
        }

        public void Fusion(BoundingBox bbx)
        {
            if (pMin != null)
            {
                if (bbx.pMin != null)
                {
                    if (pMin.x > bbx.pMin.x)
                        pMin.x = bbx.pMin.x;
                    if (pMin.y > bbx.pMin.y)
                        pMin.y = bbx.pMin.y;
                    if (pMin.z > bbx.pMin.z)
                        pMin.z = bbx.pMin.z;
                    if (pMax.x < bbx.pMax.x)
                        pMax.x = bbx.pMax.x;
                    if (pMax.y < bbx.pMax.y)
                        pMax.y = bbx.pMax.y;
                    if (pMax.z < bbx.pMax.z)
                        pMax.z = bbx.pMax.z;
                }
            }
            else
                Set(bbx.pMin, bbx.pMax);
        }

        public void Fusion(Vector3D p)
        {
            if (pMin != null)
            {
                if (p != null)
                {
                    if (pMin.x > p.x)
                        pMin.x = p.x;
                    if (pMin.y > p.y)
                        pMin.y = p.y;
                    if (pMin.z > p.z)
                        pMin.z = p.z;
                    if (pMax.x < p.x)
                        pMax.x = p.x;
                    if (pMax.y < p.y)
                        pMax.y = p.y;
                    if (pMax.z < p.z)
                        pMax.z = p.z;
                }
            }
            else
                Set(p, p);
        }

        public void Print()
        {
            System.Console.Out.Write("Bounding Box :: ");
            pMin.PrintPos();
            System.Console.Out.Write("-");
            pMax.PrintPos();
            System.Console.Out.Write("diagonal-size:" + DispFormat.DoubleFormat(DiagonalSize(), 3));
            System.Console.Out.Write(" x-size:" + DispFormat.DoubleFormat(pMax.x - pMin.x, 3));
            System.Console.Out.Write(" y-size:" + DispFormat.DoubleFormat(pMax.y - pMin.y, 3));
            System.Console.Out.WriteLine(" z-size:" + DispFormat.DoubleFormat(pMax.z - pMin.z, 3));
        }

        public double DiagonalSize()
        {
            if (pMin == null)
            {
                return 0.0D;
            }
            return pMax.Sub(pMin).Length();
        }
    }
}