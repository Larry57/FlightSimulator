// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{

    using System;
    using System.Drawing;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class Scine : VsObject
    {
        public const int DRAW_MODE_NORMAL = 0;
        public const int DRAW_MODE_COMPLETE = 1;
        public ArrayList drawOrder;

        public OpticalAmbience optamb;

        public Scine()
        {
            drawOrder = new ArrayList(100);
            optamb = new OpticalAmbience();
        }

        public Scine(Scine Sc)
        {
            drawOrder = new ArrayList(100);
            optamb = new OpticalAmbience();
            Set(Sc);
            optamb = new OpticalAmbience(Sc.optamb);
        }

        public override void Add(VsElement elem)
        {
            if (!elem.ElemType().Equals("VsObject"))
            {
                base.Add(Jp.Maker1.Vsys3.Tools.VsElementFactory.CreateElement(elem));
                AddDrawOrder();
            }
            else
            {
                VsObject vso = (VsObject)elem;
                for (int i = 0; i < vso.element.Count; i++)
                    Add(vso.GetElement(i));
            }
        }

        private void AddDrawOrder()
        {
            drawOrder.Add(((int)(drawOrder.Count)));
        }

        private double Depth(int i)
        {
            return GetElement(i).Depth();
        }

        public void DepthSort()
        {
            int n = drawOrder.Count;
            int[] newOrder = new int[n];
            double[] depthBuf = new double[n];

            for (int i = 0; i < n; i++)
            {
                newOrder[i] = i;
                depthBuf[i] = Depth(i);
            }
            for (int i_0 = 0; i_0 < n - 1; i_0++)
            {
                for (int j = i_0 + 1; j < n; j++)
                {
                    if (depthBuf[j] > depthBuf[i_0])
                    {
                        int temp = newOrder[i_0];
                        newOrder[i_0] = newOrder[j];
                        newOrder[j] = temp;
                        double dtemp = depthBuf[i_0];
                        depthBuf[i_0] = depthBuf[j];
                        depthBuf[j] = dtemp;
                    }
                }
            }
            for (int i_1 = 0; i_1 < n; i_1++)
                drawOrder[i_1] = ((int)(newOrder[i_1]));
        }

        public override void Draw(Graphics g)
        {
            Draw(g, 0);
        }

        public void Draw(Graphics g, int draw_mode)
        {
            if (draw_mode == 0)
            {
                for (int j = 0; j < Size(); j++)
                {
                    int i = ((Int32)drawOrder[j]);
                    GetElement(i).Draw(g);
                }
            }
            if (draw_mode == 1)
                for (int j_0 = 0; j_0 < Size(); j_0++)
                {
                    int i_1 = ((Int32)drawOrder[j_0]);
                    GetElement(i_1).Complete_draw(g);
                }
        }

        public void Draw(Graphics g, Clipper clip)
        {
            //g.SetClip((int)clip.vp_xmin, (int)clip.vp_ymin, (int)(clip.vp_xmax - clip.vp_xmin) + 1, (int)(clip.vp_ymax - clip.vp_ymin) + 1);
            Draw(g, 0);
        }

        public Scine MakeView(Clipper clip, Projector proj, bool depthSortFlag)
        {
            Scine view = new Scine(this);
            for (int i = 0; i < Size(); i++)
            {
                view.Set(i, view.GetElement(i).Clip3DF(clip));
                if (view.GetElement(i).ElemType().Equals("VsPolygon3"))
                {
                    ((VsPolygon3)view.GetElement(i)).SetColor(optamb);
                }
                if (view.GetElement(i).ElemType().Equals("VsPolygon4"))
                {
                    ((VsPolygon4)view.GetElement(i)).SetColor(optamb);
                }
            }
            if (depthSortFlag)
            {
                view.DepthSort();
            }
            for (int i_0 = 0; i_0 < Size(); i_0++)
            {
                view.Set(i_0, view.GetElement(i_0).Project(proj));
                view.Set(i_0, view.GetElement(i_0).Clip2D(clip));
            }
            return view;
        }

        public override void Print()
        {
            System.Console.Out.WriteLine("Scine {");
            System.Console.Out.WriteLine("DrawOrder {");
            for (int i = 0; i < drawOrder.Count; i++)
            {
                System.Console.Out.WriteLine("\torder:" + (i + 1) + " element[" + drawOrder[i] + "]" + "depth = " + DispFormat.DoubleFormat(Depth(((Int32)drawOrder[i])), 3));
            }
            System.Console.Out.WriteLine("");
            System.Console.Out.WriteLine("}");
            base.Print();
            System.Console.Out.WriteLine("}");
        }

        public void Set(Scine sc)
        {
            base.Set(sc);
            for (int i = 0; i < sc.element.Count; i++)
            {
                drawOrder[i] = ((int)(((Int32)sc.drawOrder[i])));
            }
            optamb = sc.optamb;
        }

        public void SetOpticalAmbience(OpticalAmbience oa)
        {
            optamb = oa;
        }
    }
}