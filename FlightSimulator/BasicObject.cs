// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{

    using System;
    using System.Drawing;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class BasicObject
    {
        public static VsPolygon Square(int r, int g, int b)
        {
            double[] x = { -0.5D, 0.5D, 0.5D, -0.5D };
            double[] y = { -0.5D, -0.5D, 0.5D, 0.5D };
            double[] z = new double[4];

            return new VsPolygon(4, x, y, z, r, g, b);
        }

        public static VsPolygon RegularPolygon(int n, int r, int g, int b)
        {
            double[] x = new double[n];
            double[] y = new double[n];
            double[] z = new double[n];
            double angleStep = 360.0D / n;
            double startAngle = 270.0D - angleStep / 2.0D;

            for (int i = 0; i < n; i++)
            {
                double angle = startAngle + angleStep * i;
                if (angle > 360.0D)
                    angle -= 360.0D;
                x[i] = (Math.Cos(MathTool.DegToRad(angle)) / 2.0D);
                y[i] = (Math.Sin(MathTool.DegToRad(angle)) / 2.0D);
                z[i] = 0.0D;
            }

            VsPolygon ret = new VsPolygon(n, x, y, z, r, g, b);
            return ret;
        }

        public static VsObject Qube(int r, int g, int b, double shadeRate)
        {
            VsObject ret = new VsObject();
            VsPolygon a = Square(r, g, b);
            Matrix44 m = new Matrix44();

            m.SetTMat(0.0D, 0.0D, -0.5D);
            a = (VsPolygon)a.Transform(m);
            ret.Add(a);
            m.SetRyMat(MathTool.DegToRad(180.0D));
            ret.Add(a.Transform(m));

            double k = 1.0D - shadeRate;
            if (k < 0.0D)
                k = 0.0D;
            a.col = Color.FromArgb((int)(r * k), (int)(g * k), (int)(b * k));
            m.SetRyMat(MathTool.DegToRad(90.0D));
            ret.Add(a.Transform(m));
            m.SetRyMat(MathTool.DegToRad(-90.0D));
            ret.Add(a.Transform(m));

            k = 1.0D - shadeRate * 2.0D;
            if (k < 0.0D)
                k = 0.0D;
            a.col = Color.FromArgb((int)(r * k), (int)(g * k), (int)(b * k));
            m.SetRxMat(MathTool.DegToRad(90.0D));
            ret.Add(a.Transform(m));
            m.SetRxMat(MathTool.DegToRad(-90.0D));
            ret.Add(a.Transform(m));

            return ret;
        }

        public static VsPolygon3 TestTriangleM(Material mate)
        {
            double[] x = { -0.5D, 0.5D, -0.5D };
            double[] y = { -0.5D, 0.5D, 0.5D };
            double[] z = new double[3];

            return new VsPolygon3(3, x, y, z, mate);
        }

        public static VsPolygon3 SquareM(Material mate)
        {
            double[] x = { -0.5D, 0.5D, 0.5D, -0.5D };
            double[] y = { -0.5D, -0.5D, 0.5D, 0.5D };
            double[] z = new double[4];

            return new VsPolygon3(4, x, y, z, mate);
        }

        public static VsObject QubeM(Material mate)
        {
            VsObject ret = new VsObject();
            VsPolygon3 a = SquareM(mate);
            Matrix44 m = new Matrix44();

            m.SetTMat(0.0D, 0.0D, -0.5D);
            a = (VsPolygon3)a.Transform(m);
            ret.Add(a);
            m.SetRyMat(MathTool.DegToRad(180.0D));
            ret.Add(a.Transform(m));

            m.SetRyMat(MathTool.DegToRad(90.0D));
            ret.Add(a.Transform(m));
            m.SetRyMat(MathTool.DegToRad(-90.0D));
            ret.Add(a.Transform(m));

            m.SetRxMat(MathTool.DegToRad(90.0D));
            ret.Add(a.Transform(m));
            m.SetRxMat(MathTool.DegToRad(-90.0D));
            ret.Add(a.Transform(m));

            return ret;
        }

        public static VsPolygon3 RegularPolygonM(int n, Material mate)
        {
            double[] x = new double[n];
            double[] y = new double[n];
            double[] z = new double[n];
            double angleStep = 360.0D / n;
            double startAngle = 270.0D - angleStep / 2.0D;

            for (int i = 0; i < n; i++)
            {
                double angle = startAngle + angleStep * i;
                if (angle > 360.0D)
                    angle -= 360.0D;
                x[i] = (System.Math.Cos(MathTool.DegToRad(angle)) / 2.0D);
                y[i] = (System.Math.Sin(MathTool.DegToRad(angle)) / 2.0D);
                z[i] = 0.0D;
            }

            VsPolygon3 ret = new VsPolygon3(n, x, y, z, mate);
            return ret;
        }

        public static VsPolygon4 RegularPolygonM2(int n, Material mate, Material mate2)
        {
            double[] x = new double[n];
            double[] y = new double[n];
            double[] z = new double[n];
            double angleStep = 360.0D / n;
            double startAngle = 270.0D - angleStep / 2.0D;

            for (int i = 0; i < n; i++)
            {
                double angle = startAngle + angleStep * i;
                if (angle > 360.0D)
                    angle -= 360.0D;
                x[i] = (Math.Cos(MathTool.DegToRad(angle)) / 2.0D);
                y[i] = (Math.Sin(MathTool.DegToRad(angle)) / 2.0D);
                z[i] = 0.0D;
            }

            VsPolygon4 ret = new VsPolygon4(n, x, y, z, mate, mate2);
            return ret;
        }

        public static VsObject Prism(VsPolygon3 bs, double thickness)
        {
            VsObject ret = new VsObject();
            Matrix44 m = new Matrix44();

            ret.Add(new VsPolygon3(bs));
            m.SetTMat(0.0D, 0.0D, thickness);
            VsPolygon3 p = (VsPolygon3)bs.Transform(m);

            int n = bs.pol.NVertex();
            for (int i = 0; i < n; i++)
            {
                int j = i + 1;
                if (j >= n)
                    j = 0;
                Polygon3D temp = new Polygon3D();
                temp.AddVertex(new Vector3D(bs.pol.GetVertex(i)));
                temp.AddVertex(new Vector3D(p.pol.GetVertex(i)));
                temp.AddVertex(new Vector3D(p.pol.GetVertex(j)));
                temp.AddVertex(new Vector3D(bs.pol.GetVertex(j)));
                ret.Add(new VsPolygon3(temp, new Material(bs.mate)));
            }

            p.pol.Reverse();
            ret.Add(p);

            return ret;
        }

        public static VsObject Pyramid(VsPolygon3 bs, Vector3D top)
        {
            VsObject ret = new VsObject();
            Matrix44 m = new Matrix44();

            ret.Add(new VsPolygon3(bs));

            int n = bs.pol.NVertex();
            for (int i = 0; i < n; i++)
            {
                int j = i + 1;
                if (j >= n)
                    j = 0;
                Polygon3D temp = new Polygon3D();
                temp.AddVertex(new Vector3D(bs.pol.GetVertex(j)));
                temp.AddVertex(new Vector3D(bs.pol.GetVertex(i)));
                temp.AddVertex(new Vector3D(top));
                ret.Add(new VsPolygon3(temp, new Material(bs.mate)));
            }

            return ret;
        }

        public static VsObject XyGlid(double z, double x0, double y0, double x1, double y1, double xstep, double ystep, Color col)
        {
            VsObject ret = new VsObject();

            for (double x = x0; x <= x1; x += xstep)
            {
                ret.Add(new VsSegment(x, y0, z, x, y1, z, col));
            }
            for (double y = y0; y <= y1; y += ystep)
            {
                ret.Add(new VsSegment(x0, y, z, x1, y, z, col));
            }
            return ret;
        }

        public static VsObject XzGlid(double y, double x0, double z0, double x1, double z1, double xstep, double zstep, Color col)
        {
            VsObject ret = new VsObject();

            for (double x = x0; x <= x1; x += xstep)
            {
                ret.Add(new VsSegment(x, y, z0, x, y, z1, col));
            }
            for (double z = z0; z <= z1; z += zstep)
            {
                ret.Add(new VsSegment(x0, y, z, x1, y, z, col));
            }
            return ret;
        }
    }
}