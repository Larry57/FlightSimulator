// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace FlightSimulator
{


    using Jp.Maker1.Vsys3.Tools;
    using System;
    using System.Drawing;

    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class Locus
    {
        internal VsObject plane;
        internal VsObject locus;
        internal BoundingBox locusBBox;
        internal VsObject groundLocus;
        internal VsObject ybaseLocus;

        public Locus(AirPlane ap, Recorder rec, Material mate, Material mate2)
        {
            plane = new VsObject();
            locus = new VsObject();
            groundLocus = new VsObject();
            ybaseLocus = new VsObject();
            MakePlane(ap, mate, mate2);
            MakeLocus(rec, ap);
            groundLocus = MakeXZLocus(rec, 0.0D, Color.Black);
            double y_base = LocusGrid.Y_base(locusBBox);
            if (y_base > 0.0D)
            {
                ybaseLocus = MakeXZLocus(rec, y_base, Color.Gray);
                ybaseLocus.Add(MakeWall(rec, y_base, Color.Gray));
            }
        }

        public void MakePlane(AirPlane ap, Material mate, Material mate2)
        {
            Matrix44 smat = new Matrix44();
            Matrix44 rmat = new Matrix44();
            Matrix44 tmat = new Matrix44();

            smat.SetSMat(ap.plane.width, ap.plane.length, 0.0D);
            tmat.SetTMat(0.0D, -ap.plane.length / 2.0D + ap.plane.x_offset, 0.0D);
            rmat.SetRxMat(MathTool.DegToRad(90.0D));
            VsPolygon4 tripol = (VsPolygon4)Jp.Maker1.Vsys3.Tools.BasicObject.RegularPolygonM2(3, mate,
                    mate2).Transform(smat);
            plane.Add(tripol.Transform(tmat).Transform(rmat));
        }

        public void MakeLocus(Recorder rec, AirPlane ap)
        {
            Matrix44 rmat = new Matrix44();
            Matrix44 tmat = new Matrix44();

            int n = rec.N_record();
            for (int i = 0; i < n; i++)
            {
                RecordData dat = rec.GetData(i);
                rmat.SetRMatL_RPY(dat.roll.GetValue(), dat.pitch.GetValue(),
                        dat.yaw.GetValue());
                tmat.SetTMat(dat.wpos.x, dat.wpos.y, dat.wpos.z);
                locus.Add(plane.Transform(rmat).Transform(tmat));
            }

            locusBBox = locus.BoundingBox();
        }

        public VsObject MakeXZLocus(Recorder rec, double y, Color col)
        {
            VsObject xzLocus = new VsObject();
            Vector3D v1 = new Vector3D();
            Vector3D v2 = new Vector3D();

            int n = rec.N_record();
            for (int i = 0; i < n; i++)
            {
                RecordData dat = rec.GetData(i);
                if (i > 0)
                {
                    v1.SetVec(dat.wpos);
                    v2.SetVec(rec.GetData(i - 1).wpos);
                    v1.y = (v2.y = y);
                    xzLocus.Add(new VsSegment(v1, v2, col));
                }
            }
            return xzLocus;
        }

        public VsObject MakeWall(Recorder rec, double y, Color col)
        {
            VsObject wall = new VsObject();

            int n = rec.N_record();
            if (n > 0)
            {
                wall.Add(Suisen(rec.GetData(0), y, col));
                wall.Add(Suisen(rec.GetData(n - 1), y, col));
            }
            int step = n / 10;
            if (step > 0)
            {
                for (int i = step; i < n; i += step)
                {
                    RecordData dat = rec.GetData(i);
                    wall.Add(Suisen(dat, y, col));
                }
            }
            return wall;
        }

        public VsSegment Suisen(RecordData dat, double y, Color col)
        {
            Vector3D v0 = new Vector3D(dat.wpos);
            Vector3D v1 = new Vector3D(dat.wpos);
            v0.y = 0.0D;
            v1.y = y;
            return new VsSegment(v0, v1, col);
        }
    }
}