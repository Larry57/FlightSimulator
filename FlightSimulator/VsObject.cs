// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{

    using System;
    using System.Drawing;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class VsObject : VsElement
    {
        public String type;

        internal ArrayList element;

        public VsObject()
        {
            type = "VsObject";
            element = new ArrayList(100);
        }

        public VsObject(VsObject vsobj)
        {
            type = "VsObject";
            element = new ArrayList(100);
            Set(vsobj);
        }

        public virtual String ElemType()
        {
            return type;
        }

        public virtual void Add(VsElement elem)
        {
            element.Add(elem);
        }

        public VsElement GetElement(int i)
        {
            return (VsElement)element[i];
        }

        public String GetType(int i)
        {
            return GetElement(i).ElemType();
        }

        public VsObject Copy()
        {
            VsObject ret = new VsObject();
            for (int i = 0; i < Size(); i++)
            {
                VsElement temp = Jp.Maker1.Vsys3.Tools.VsElementFactory.CreateElement(GetElement(i));
                if (temp != null)
                {
                    ret.Add(temp);
                }
            }
            return ret;
        }

        public virtual void Print()
        {
            System.Console.Out.WriteLine(type + "::");

            System.Console.Out.WriteLine("{");
            for (int i = 0; i < Size(); i++)
            {
                String type_0 = GetType(i);
                System.Console.Out.Write("\t[" + i + "] ");
                GetElement(i).Print();
            }
            System.Console.Out.WriteLine("}");
        }

        public void Remove(int i)
        {
            //ILOG.J2CsMapping.Collections.Collections.RemoveAt(element, i);
        }

        public void Set(int i, VsElement elem)
        {
            element[i] = elem;
        }

        public void Set(VsObject vso)
        {
            for (int i = 0; i < vso.element.Count; i++)
                Add(Jp.Maker1.Vsys3.Tools.VsElementFactory.CreateElement(vso.GetElement(i)));
        }

        public int Size()
        {
            return element.Count;
        }

        public virtual VsElement Transform(Matrix44 mat)
        {
            VsObject ret = new VsObject();
            for (int i = 0; i < Size(); i++)
            {
                ret.Add(GetElement(i).Transform(mat));
            }
            return ret;
        }

        public virtual BoundingBox BoundingBox()
        {
            BoundingBox ret = new BoundingBox();

            for (int i = 0; i < Size(); i++)
            {
                ret.Fusion(GetElement(i).BoundingBox());
            }
            return ret;
        }

        public virtual void SetColor(Color col)
        {
            for (int i = 0; i < Size(); i++)
                GetElement(i).SetColor(col);
        }

        public virtual void SetMaterial(Material mate)
        {
            for (int i = 0; i < Size(); i++)
                GetElement(i).SetMaterial(mate);
        }

        public virtual double Depth()
        {
            return BoundingBox().pMin.z;
        }

        public virtual VsElement Clip2D(Clipper clip)
        {
            return null;
        }

        public virtual VsElement Clip3DF(Clipper clip)
        {
            return null;
        }

        public virtual VsElement Project(Projector proj)
        {
            return null;
        }

        public virtual void Draw(Graphics g)
        {
        }

        public virtual void Complete_draw(Graphics g)
        {
        }
    }
}