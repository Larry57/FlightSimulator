// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace FlightSimulator
{

    using Jp.Maker1.Util.Gui;
    using Jp.Maker1.Vsys3.Tools;
    using System;

    using System.Drawing;

    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class ConfigMenu
    {
        private Clipper clip;
        public Color bgColor;
        public Color stdColor;
        public Color ca_bgCol;
        public Color ca_bdCol;

        public Font stdFont;
        public Font bigFont;
        public Font smallFont;
        internal ClickArea airplaneNext;
        internal ClickArea airplanePrev;
        internal ClickArea setting_normal;
        internal ClickArea setting_lowlevel;
        internal ClickArea ok;
        internal ClickArea cancel;
        internal AirPlaneList apl;
        internal int airplaneCange;
        internal int selectedAirPlane;
        internal int displayAirPlane;

        public readonly int SETTING_NOMAL;
        public readonly int SETTING_LOWLEVEL;
        public int selectedSetting;
        private int displaySetting;
        private String[] settingName;
        private double[] dt;
        private int[] t_disp;
        private int[] t_record;

        public ConfigMenu(double sX0, double sY0, double sX1, double sY1, AirPlaneList aplIn)
        {
            bgColor = Color.FromArgb(255, 255, 255);
            stdColor = Color.FromArgb(0, 0, 0);
            ca_bgCol = Color.FromArgb(240, 240, 240);
            ca_bdCol = Color.FromArgb(0, 0, 0);
            stdFont = new Font("SansSelif", 12);
            bigFont = new Font("SansSelif", 16);
            smallFont = new Font("SansSelif", 9);
            airplaneCange = 0;
            selectedAirPlane = 0;
            displayAirPlane = 0;
            SETTING_NOMAL = 0;
            SETTING_LOWLEVEL = 1;
            selectedSetting = 0;
            displaySetting = 0;
            settingName = new String[] { "NORMAL", "LOW_LEVEL" };
            dt = new double[] { 0.005D, 0.01D };
            t_disp = new int[] { 6, 7 };
            t_record = new int[] { 40, 20 };
            clip = new Clipper(sX0, sY0, sX1, sY1);
            apl = aplIn;

            ok = new ClickArea(0, 0, 0, 0, ca_bdCol, ca_bgCol);
            cancel = new ClickArea(0, 0, 0, 0, ca_bdCol, ca_bgCol);
            airplaneNext = new ClickArea(0, 0, 0, 0, ca_bdCol, ca_bgCol);
            airplanePrev = new ClickArea(0, 0, 0, 0, ca_bdCol, ca_bgCol);
            setting_normal = new ClickArea(0, 0, 0, 0, ca_bdCol, ca_bgCol);
            setting_lowlevel = new ClickArea(0, 0, 0, 0, ca_bdCol, ca_bgCol);
        }

        public void Draw(Graphics g, String version)
        {
            //g.SetColor(bgColor);
            //g.FillRect((int)clip.vp_xmin, (int)clip.vp_ymin, (int)(clip.vp_xmax - clip.vp_xmin + 1.0D), (int)(clip.vp_ymax - clip.vp_ymin + 1.0D));

           // g.SetFont(bigFont);
           // g.SetColor(stdColor);
            int x = 3;
            int y = 13;
            int dy = 14;
           // g.DrawString("FLIGHT SIMULATION APPLET CONFIG MENU", x, y);
            y += dy;

            //g.SetFont(stdFont);
            //g.SetColor(stdColor);
            x = 3;
            y = 35;
            dy = 13;
           // g.DrawString("AIRPLANE SELECT", x, y);
            y += 3;
            airplanePrev.SetExtent(x, y, 15, 10);
            airplanePrev.Draw(g);
            airplaneNext.SetExtent(x, y + 13, 15, 10);
            airplaneNext.Draw(g);
          //  g.SetColor(stdColor);
            Jp.Maker1.Util.Symbol.Draw_triangle_symbol(g, x + 8, y + 8, 6, 2);
            Jp.Maker1.Util.Symbol.Draw_triangle_symbol(g, x + 8, y + 16, 5, 0);
            y += 16;
         //   g.SetFont(bigFont);
          //  g.DrawString(apl.GetName(displayAirPlane), x + 27, y);

          //  g.SetFont(stdFont);
          //  g.SetColor(stdColor);
            x = 3;
            y = 90;
            dy = 13;
          //  g.DrawString("PERFORMANCE SETTING", x, y);
            y += 3;
            setting_normal.SetExtent(x, y, 70, 16);
            setting_normal.Draw(g);
            setting_lowlevel.SetExtent(x, y + 19, 70, 16);
            setting_lowlevel.Draw(g);
           // g.SetColor(stdColor);
           // g.DrawString("NORMAL", x + 13, y + 13);
           // g.DrawString("LOW LEVEL", x + 5, y + 32);
           // g.DrawString(PSettingStr(displaySetting), x + 80, y + 22);

            ok.SetExtent(225, 310, 70, 18);
            ok.Draw(g);
            // g.SetFont(stdFont);
            // g.SetColor(stdColor);
            // g.DrawString("OK", 255, 324);
            cancel.SetExtent(305, 310, 70, 18);
            cancel.Draw(g);
            //  g.SetFont(stdFont);
            //  g.SetColor(stdColor);
            //  g.DrawString("CANCEL", 319, 324);

            //  g.SetFont(stdFont);
            x = 3;
            y = 350;
            dy = 13;
            //  g.DrawString(Jp.Maker1.Fsim.FsimConst.title + " " + version, x, y);
            y += dy;
            //  g.DrawString("Copyright 2003 " + Jp.Maker1.Fsim.FsimConst.author + ". All rights reserved.", x, y);
            y += dy;
            //  g.DrawString("URL : http://www2.odn.ne.jp/~cdh88520/", x, y);
            y += dy;
            //   g.DrawString("e-Mail : maker-one@par.odn.ne.jp", x, y);
            y += dy;
        }

        public void Click(int mx, int my, SimulatorInterface simif)
        {
            if (airplaneNext.Test(mx, my))
            {
                displayAirPlane += 1;
                if (displayAirPlane >= apl.NItem())
                {
                    displayAirPlane = 0;
                }
            }
            if (airplanePrev.Test(mx, my))
            {
                displayAirPlane -= 1;
                if (displayAirPlane < 0)
                {
                    displayAirPlane = (apl.NItem() - 1);
                }
            }
            if (setting_normal.Test(mx, my))
            {
                displaySetting = 0;
            }
            if (setting_lowlevel.Test(mx, my))
            {
                displaySetting = 1;
            }
            if (cancel.Test(mx, my))
            {
                displayAirPlane = selectedAirPlane;
                displaySetting = selectedSetting;
                simif.mode = 0;
            }
            if (ok.Test(mx, my))
            {
                if (displayAirPlane != selectedAirPlane)
                {
                    selectedAirPlane = displayAirPlane;
                    simif.changePlane = 1;
                }
                if (displaySetting != selectedSetting)
                {
                    selectedSetting = displaySetting;
                    simif.changePSetting = 1;
                }
                simif.mode = 0;
            }
        }

        public String PSettingStr(int setting)
        {
            return settingName[setting] + " deltaT:" + dt[setting]
                    * 1000.0D + "[msec] nDISP:" + t_disp[setting]
                    + " nRecord:" + t_record[setting];
        }

        public void SetPSetting(TimeParam tp)
        {
            tp.dt = dt[selectedSetting];
            tp.t_disp = t_disp[selectedSetting];
            tp.t_record = t_record[selectedSetting];
        }
    }
}