// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{

    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class Light
    {
        public const String AMBIENCE = "AMBIENCE";
        public const String PARALLEL = "PARALLEL";
        public const String POINT = "POINT";
        public String type;
        public Vector3D position;
        public Vector3D direction;
        public LightColor brightness;

        public Light()
        {
            type = "PARALLEL";
            position = null;
            direction = new Vector3D(0.0D, 0.0D, 1.0D);
            brightness = new LightColor(255.0D, 255.0D, 255.0D);
        }

        public Light(Light l)
        {
            type = l.type;
            position = null;
            if (l.position != null)
            {
                position = new Vector3D(l.position);
            }
            direction = null;
            if (l.direction != null)
            {
                direction = new Vector3D(l.direction);
            }
            brightness = new LightColor(l.brightness);
        }

        public Light(String ltype, LightColor lc, Vector3D v)
        {
            if (ltype.Equals("AMBIENCE"))
            {
                type = "AMBIENCE";
                position = null;
                direction = null;
                brightness = lc;
            }
            else if (ltype.Equals("PARALLEL"))
            {
                type = "PARALLEL";
                position = null;
                direction = v;
                brightness = lc;
            }
            else if (ltype.Equals("POINT"))
            {
                type = "POINT";
                position = v;
                direction = null;
                brightness = lc;
            }
            else
            {
                type = "PARALLEL";
                position = null;
                direction = new Vector3D(0.0D, 0.0D, 1.0D);
                brightness = new LightColor(255.0D, 255.0D, 255.0D);
            }
        }

        public static Light Ambience(LightColor brightness_0)
        {
            return new Light("AMBIENCE", brightness_0, null);
        }

        public static Light Parallel(LightColor brightness_0, Vector3D direction_1)
        {
            return new Light("PARALLEL", brightness_0, direction_1);
        }

        public static Light Point(LightColor brightness_0, Vector3D position_1)
        {
            return new Light("POINT", brightness_0, position_1);
        }

        public Light Transform(Matrix44 mat)
        {
            Light ret = new Light(this);
            if (position != null)
            {
                ret.position = position.MultMat(mat);
            }
            if (direction != null)
            {
                ret.direction = direction.MultMat(mat.DtMat());
            }
            return ret;
        }

        public LightColor CalcBrightness(Vector3D eyePos, Vector3D pos,
                Vector3D normal, Material mate)
        {
            return Specular(eyePos, pos, normal, mate).Add(
                    Diffuse(pos, normal, mate));
        }

        private LightColor Diffuse(Vector3D pos, Vector3D normal, Material mate)
        {
            LightColor ret = new LightColor(0.0D, 0.0D, 0.0D);
            Vector3D nml = normal.NmlVec();
            Vector3D lv = LightDirectionVector(pos, normal);

            double cosc = nml.DotProd(lv);
            if (cosc > 0.0D)
            {
                for (int i = 0; i < 3; i++)
                {
                    ret.SetElement(i, Strength(pos).GetElement(i) * cosc
                            * mate.diffuse.GetElement(i));
                }
            }
            return ret;
        }

        private LightColor Specular(Vector3D eyePos, Vector3D pos, Vector3D normal,
                Material mate)
        {
            LightColor ret = new LightColor(0.0D, 0.0D, 0.0D);
            if (!type.Equals("AMBIENCE"))
            {
                Vector3D nml = normal;
                Vector3D lv = LightDirectionVector(pos, normal);
                Vector3D ev = EyeDirectionVector(pos, eyePos);
                double a = nml.DotProd(lv);
                Vector3D rv = nml.SclProd(2.0D * a).Sub(lv);

                double cosc = rv.DotProd(ev);

                if (cosc > 0.0D)
                {
                    double k = Math.Pow(cosc, mate.specularSharpness);
                    for (int i = 0; i < 3; i++)
                    {
                        ret.SetElement(i, Strength(pos).GetElement(i) * k * mate.specular.GetElement(i));
                    }
                }
            }
            return ret;
        }

        private Vector3D LightDirectionVector(Vector3D pos, Vector3D normal)
        {
            Vector3D ret = new Vector3D();

            if (type.Equals("AMBIENCE"))
            {
                ret = normal.NmlVec();
            }
            if (type.Equals("PARALLEL"))
            {
                ret = direction.SclProd(-1.0D).NmlVec();
            }
            if (type.Equals("POINT"))
            {
                ret = position.Sub(pos).NmlVec();
            }
            return ret;
        }

        private Vector3D EyeDirectionVector(Vector3D pos, Vector3D eyePos)
        {
            return eyePos.Sub(pos).NmlVec();
        }

        private LightColor Strength(Vector3D pos)
        {
            LightColor ret = new LightColor(brightness);
            if (type.Equals("POINT"))
            {
                double dist = pos.Sub(position).Length();
                if (dist > 0.0D)
                {
                    ret.Mult(1.0D / dist / dist);
                }
            }
            return ret;
        }

        public void Print()
        {
            System.Console.Out.Write(type + "::");
            System.Console.Out.Write("POS=");
            position.PrintPos();
            System.Console.Out.Write(" DIR=");
            direction.PrintPos();
            System.Console.Out.Write(" Bri=");
            brightness.Print();
        }
    }
}