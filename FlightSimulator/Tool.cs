// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Sim.Tools
{

    using Jp.Maker1.Vsys3.Tools;
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class Tool
    {
        public static double CalcAlpha(Vector3D v)
        {
            if (v.Length() <= 0.0D)
            {
                return 0.0D;
            }
            double v1 = Math.Sqrt(v.x * v.x + v.y * v.y);
            return System.Math.Atan2(v.z, v1);
        }

        public static double CalcBeta(Vector3D v)
        {
            double v1 = Math.Sqrt(v.x * v.x + v.y * v.y);
            if ((v.y == 0.0D) && (v.x == 0.0D))
            {
                return 0.0D;
            }
            return System.Math.Atan2(v.y, v.x);
        }

        public static double Hokan(double x0, double y0, double x1, double y1, double x)
        {
            if (y0 != y1)
            {
                return y0 + (x - x0) * (y1 - y0) / (x1 - x0);
            }
            return 0.0D;
        }

        public static double Hokan2(double x0, double y0, double x1, double y1, double x)
        {
            if (x <= x0)
                return y0;
            if (x >= x1)
                return y1;
            return Hokan(x0, y0, x1, y1, x);
        }

        public static double Hokan2_2D(double x0, double y0, double z0, double x1, double y1, double z1, double x, double y)
        {
            double kx = Hokan(x0, 0.0D, x1, 1.0D, x);
            double ky = Hokan(y0, 0.0D, y1, 0.0D, y);
            double k;

            if (kx > ky)
                k = kx;
            else
            {
                k = ky;
            }
            return Hokan2(0.0D, z0, 1.0D, z1, k);
        }

        public static String TimeStr3(double tIn)
        {
            double t = tIn;

            double hh = Math.Floor(t / 3600.0D);
            t -= hh * 3600.0D;
            double mm = Math.Floor(t / 60.0D);
            double ss = t - mm * 60.0D;

            return DispFormat.DoubleFormatZ(hh, 2, 0) + ":" + DispFormat.DoubleFormatZ(mm, 2, 0) + ":" + DispFormat.DoubleFormatZ(ss, 2, 3);
        }

        public static String TimeStr1(double tIn)
        {
            return TimeStr3(tIn).Substring(0, (10) - (0));
        }

        public static String TimeStr(double tIn)
        {
            return TimeStr3(tIn).Substring(0, (8) - (0));
        }
    }
}