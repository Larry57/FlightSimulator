// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Sim.Tools
{

    using Jp.Maker1.Vsys3.Tools;
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class PlaneMotion : Motion
    {
        public Vector3D vcDash;

        public Vector3D vc;

        public Vector3D d_vc;

        public Vector3D omega;

        public Vector3D d_omega;

        public Vector3D dg;
        public double alpha;
        public double beta;
        public double d_alpha;
        private double alpha_b;
        private Vector3D d_vc_b;

        private Vector3D d_omega_b;

        public Vector3D force;

        public Vector3D torque;

        public PlaneMotion(Inertia ip, double xIn, double yIn, double zIn, double rollIn, double pitchIn, double yawIn, double u, double v, double w, double p, double q, double r)
            : base(xIn, yIn, zIn, rollIn, pitchIn, yawIn, 0.0D, 0.0D, 0.0D)
        {
            vcDash = new Vector3D();
            vc = new Vector3D();
            d_vc = new Vector3D();
            omega = new Vector3D();
            d_omega = new Vector3D();
            dg = new Vector3D();
            d_vc_b = new Vector3D();
            d_omega_b = new Vector3D();
            force = new Vector3D(0.0D, 0.0D, 0.0D);
            torque = new Vector3D(0.0D, 0.0D, 0.0D);

            pos_integral_mode = 1;

            vc.SetVec(u, v, w);

            omega.SetVec(p, q, r);

            Convert_motion_rtol(ip.cg);
            Update(0.0D);
            wv_b.SetVec(wv);
            dpitch_b = dpitch;
            dyaw_b = dheading;
            droll_b = droll;

            d_vc.SetVec(0.0D, 0.0D, 0.0D);
            d_vc_b.SetVec(0.0D, 0.0D, 0.0D);

            d_omega.SetVec(0.0D, 0.0D, 0.0D);
            d_omega_b.SetVec(0.0D, 0.0D, 0.0D);

            alpha = (alpha_b = Jp.Maker1.Sim.Tools.Tool.CalcAlpha(vc));
            beta = Jp.Maker1.Sim.Tools.Tool.CalcBeta(vc);
            d_alpha = 0.0D;

            SetGravityDirectionVector();
        }

        private void Convert_motion_rtol(Vector3D cg)
        {
            vcDash = vc.Add(omega.CrsProd(cg.SclProd(-1.0D)));

            ov.x = vcDash.y;
            ov.y = (-vcDash.z);
            ov.z = vcDash.x;

            ow.z = (-omega.x);
            ow.x = (-omega.y);
            ow.y = omega.z;
        }

        private void SetGravityDirectionVector()
        {
            Vector3D vtemp = new Vector3D(0.0D, -1.0D, 0.0D);
            vtemp = vtemp.MultMat(wom.DtMat());
            dg.SetVec(vtemp.z, vtemp.x, -vtemp.y);
        }

        private void Calc_alpha_beta(double dt)
        {
            alpha_b = alpha;
            alpha = Jp.Maker1.Sim.Tools.Tool.CalcAlpha(vc);
            beta = Jp.Maker1.Sim.Tools.Tool.CalcBeta(vc);
            if (dt != 0.0D)
                d_alpha = ((alpha - alpha_b) / dt);
        }

        public void Calc_equation_of_motion(Inertia ip, Vector3D f, Vector3D t, double dt)
        {
            double u = vc.x;
            double v = vc.y;
            double w = vc.z;
            double p = omega.x;
            double q = omega.y;
            double r = omega.z;

            double mass = ip.m;
            double ixx = ip.ixx;
            double iyy = ip.iyy;
            double izz = ip.izz;
            double izx = ip.izx;
            double ixy = ip.ixy;
            double iyz = ip.iyz;

            double l = t.x;
            double m = t.y;
            double n = t.z;

            force.SetVec(f);
            torque.SetVec(t);

            d_vc_b.SetVec(d_vc);
            d_vc.x = (dg.x * 9.80655D + f.x / mass - q * w + r * v);
            d_vc.y = (dg.y * 9.80655D + f.y / mass - r * u + p * w);
            d_vc.z = (dg.z * 9.80655D + f.z / mass - p * v + q * u);

            d_omega_b.SetVec(d_omega);

            double a = l + izx * p * q - (izz - iyy) * q * r - ixy * r * p + iyz * (q * q - r * r);
            double b = m - iyz * p * q + ixy * q * r - (ixx - izz) * r * p - izx * (p * p + r * r);
            double c = n - (iyy - ixx) * p * q - izx * q * r + iyz * r * p + ixy * (p * p - q * q);
            d_omega = new Vector3D(a, b, c).MultMat(ip.InertiaInvMat);

            vc.x += 0.5D * (d_vc.x * 3.0D - d_vc_b.x) * dt;
            vc.y += 0.5D * (d_vc.y * 3.0D - d_vc_b.y) * dt;
            vc.z += 0.5D * (d_vc.z * 3.0D - d_vc_b.z) * dt;

            omega.x += 0.5D * (d_omega.x * 3.0D - d_omega_b.x) * dt;
            omega.y += 0.5D * (d_omega.y * 3.0D - d_omega_b.y) * dt;
            omega.z += 0.5D * (d_omega.z * 3.0D - d_omega_b.z) * dt;

            Calc_alpha_beta(dt);
            Convert_motion_rtol(ip.cg);
            base.Update(dt);

            SetGravityDirectionVector();
        }
    }
}