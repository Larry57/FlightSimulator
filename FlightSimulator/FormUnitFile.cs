// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{


    using Jp.Maker1.Io.Textfile;
    using System;
    using System.Drawing;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class FormUnitFile : ReadTextFileOnServer
    {
        public String name;
        public ArrayList vertex;
        public ArrayList fvno;
        public VsObject obj0;
        public int depth_sort_sw;
        public double scale;
        public MaterialDefinitionFile mdf;

        public FormUnitFile(VsObjectList list, Uri codeBase, String fmuFilePath, String mdfFilePath)
        {
            name = null;
            vertex = new ArrayList();
            fvno = new ArrayList();
            obj0 = new VsObject();
            name = null;
            vertex = new ArrayList();
            fvno = new ArrayList();
            obj0 = new VsObject();
            //Uri fmuURL = null;
            //Uri mdfURL = null;
            //try
            //{
            //    fmuURL = new Uri(codeBase, fmuFilePath);
            //    mdfURL = new Uri(codeBase, mdfFilePath);
            //}
            //catch (Exception e)
            //{
            //    Console.Error.WriteLine(e.StackTrace);
            //}
            System.Console.Out.WriteLine(fmuFilePath + "  " + mdfFilePath);
            mdf = new MaterialDefinitionFile(mdfFilePath);
            Open(fmuFilePath);
            for (; Vs_read_form_unit(false); list.Add(name, GetVsObject()))
                ;

            //for (; Vs_read_form_unit(false); )
            //{
            //    VsObject obj = GetVsObject();
            //    list.Add(name, GetVsObject());
            //}

            Close();

        }

        private bool Vs_read_form_unit(bool message_mode)
        {
            int head_read_order = 0;

            name = null;
            vertex = new ArrayList();
            fvno = new ArrayList();
            obj0 = new VsObject();
            depth_sort_sw = 1;
            scale = 1.0D;
            while (true)
            {
                int c = ReadSkipSpace();
                if (c == -1)
                {
                    if (head_read_order != 0)
                    {
                        System.Console.Out.WriteLine("ｴﾗｰ: 形状ﾌｫｰﾑ読み込み中に EOF が表れました.vs_read_form_unit()\n");
                    }
                    return false;
                }
                if ((char)c == '#')
                {
                    ReadLine();
                }
                else
                {
                    String command = ((char)c + ReadAWord()).ToUpper();

                    if (head_read_order == 0)
                    {
                        if (!command.Equals("FORM_UNIT"))
                        {
                            System.Console.Out.WriteLine("ｴﾗｰ: [FORM_UNIT]ｺﾏﾝﾄﾞ以外のｺﾏﾝﾄﾞ[" + command + "]が最初に表れました.vs_read_form_unit()");
                            return false;
                        }
                        name = ReadAWord();
                        if (message_mode)
                        {
                            System.Console.Out.WriteLine("----------------------------------------");
                            System.Console.Out.WriteLine("FORM UNIT '" + name + "' READING...");
                        }
                        head_read_order++;
                    }
                    else if (head_read_order == 1)
                    {
                        if (!command.Equals("DEPTH_SORT"))
                        {
                            System.Console.Out.WriteLine("ｴﾗｰ: [DEPTH_SORT]ｺﾏﾝﾄﾞ以外のｺﾏﾝﾄﾞ[" + command + "]が2番目に表れました.vs_read_form_unit()");
                            return false;
                        }
                        String buf = ReadAWord().ToUpper();
                        if (buf.Equals("ON"))
                        {
                            depth_sort_sw = 1;
                            head_read_order++;
                        }
                        else if (buf.Equals("OFF"))
                        {
                            depth_sort_sw = 0;
                            head_read_order++;
                        }
                        else
                        {
                            System.Console.Out.WriteLine("ｴﾗｰ: [DEPTH_SORT]ｺﾏﾝﾄﾞに不当なﾊﾟﾗﾒｰﾀ[" + buf + "]が指定されました.vs_read_form_unit()");
                            return false;
                        }
                    }
                    else if (head_read_order == 2)
                    {
                        if (!command.Equals("SCALE"))
                        {
                            System.Console.Out.WriteLine("ｴﾗｰ: [SCALE]ｺﾏﾝﾄﾞ以外のｺﾏﾝﾄﾞ[" + command + "]が3番目に表れました.vs_read_form_unit()");
                            return false;
                        }
                        scale = ReadDouble();
                        if (scale == 0.0D)
                        {
                            System.Console.Out.WriteLine("ｴﾗｰ: [SCALE]ｺﾏﾝﾄﾞ: ｾﾞﾛが設定されました.vs_read_form_unit()");
                            return false;
                        }
                        head_read_order++;
                    }
                    else
                    {
                        if (command.Equals("FORM_END"))
                        {
                            break;
                        }
                        if (command.Equals("VERTEX"))
                        {
                            c = ReadSkipSpace();
                            if ((char)c != '{')
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [VERTEX]ｺﾏﾝﾄﾞ:{ が無いか,または { の前に空白が有りません.vs_read_form_unit()");
                                return false;
                            }
                            int check = Vs_read_vertexs();
                            if (check == -1)
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [VERTEX]ｺﾏﾝﾄﾞ: ﾌﾞﾛｯｸ内文法ｴﾗｰ.vs_read_form_unit()");
                                return false;
                            }

                        }
                        else if (command.Equals("POINT"))
                        {
                            String id = ReadAWord();
                            Color col = mdf.GetColor(id);
                            if (col == null)
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [POINT]ｺﾏﾝﾄﾞ: 存在しないﾏﾃﾘｱﾙIDが指定されています.vs_read_form_unit()");
                                return false;
                            }
                            ArrayList p = Vs_read_points();
                            if (p.Count != 1)
                            {
                                System.Console.Out
                                        .WriteLine("ｴﾗｰ: [POINT]ｺﾏﾝﾄﾞ: 頂点数が1になっていません.vs_read_form_unit()");
                                return false;
                            }
                            obj0.Add(new VsPoint((Vector3D)vertex[((Int32)p[0])], col));
                        }
                        else if (command.Equals("LINE"))
                        {
                            String id_0 = ReadAWord();
                            Color col_1 = mdf.GetColor(id_0);
                            if (col_1 == null)
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [LINE]ｺﾏﾝﾄﾞ: 存在しないﾏﾃﾘｱﾙIDが指定されています.vs_read_form_unit()");
                                return false;
                            }
                            ArrayList p_2 = Vs_read_points();
                            if (p_2.Count != 2)
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [LINE]ｺﾏﾝﾄﾞ: 頂点数が2になっていません.vs_read_form_unit()");
                                return false;
                            }
                            Vector3D p0 = new Vector3D((Vector3D)vertex[((Int32)p_2[0])]);
                            Vector3D p1 = new Vector3D((Vector3D)vertex[((Int32)p_2[1])]);
                            obj0.Add(new VsSegment(p0.x, p0.y, p0.z, p1.x,
                                    p1.y, p1.z, col_1));
                        }
                        else if (command.Equals("POLYGON_2"))
                        {
                            String id1 = ReadAWord();
                            String id2 = ReadAWord();
                            String type1 = mdf.GetType(id1);
                            String type2 = mdf.GetType(id2);
                            if (!type1.Equals(type2))
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [POLYGON_2]ｺﾏﾝﾄﾞ: 表裏のﾏﾃﾘｱﾙIDが異なっています.vs_read_form_unit()");
                                return false;
                            }
                            Color col_3;
                            Color colB;
                            Material mate = null;
                            Material mateB = null;
                            if (type1.Equals("Color"))
                                col_3 = mdf.GetColor(id1);
                            else if (type1.Equals("Material"))
                            {
                                mate = mdf.GetMaterial(id1);
                            }
                            if (type2.Equals("Color"))
                                colB = mdf.GetColor(id2);
                            else if (type2.Equals("Material"))
                            {
                                mateB = mdf.GetMaterial(id2);
                            }
                            //if (((col_3 == null) && (mate == null)) || ((colB == null) && (mateB == null)))
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [POLYGON_2]ｺﾏﾝﾄﾞ: 存在しないﾏﾃﾘｱﾙIDが指定されています.vs_read_form_unit()");
                                return false;
                            }
                            ArrayList p_4 = Vs_read_points();
                            if (p_4.Count < 3)
                            {
                                System.Console.Out
                                        .WriteLine("ｴﾗｰ: [POLYGON_2]ｺﾏﾝﾄﾞ: 頂点数が3以下です.vs_read_form_unit()");
                                return false;
                            }
                            if (type1.Equals("Color"))
                            {
                                VsPolygon2 pp = new VsPolygon2();
                                pp.col = col_3;
                                pp.colB = colB;
                                for (int i = 0; i < p_4.Count; i++)
                                {
                                    Vector3D ppp = new Vector3D((Vector3D)vertex[((Int32)p_4[i])]);
                                    pp.pol.AddVertex(ppp);
                                }
                                obj0.Add(pp);
                            }
                            else
                            {
                                VsPolygon4 pp_5 = new VsPolygon4();
                                pp_5.mate = mate;
                                pp_5.mateB = mateB;
                                for (int i_6 = 0; i_6 < p_4.Count; i_6++)
                                {
                                    Vector3D ppp_7 = new Vector3D((Vector3D)vertex[((Int32)p_4[i_6])]);
                                    pp_5.pol.AddVertex(ppp_7);
                                }
                                obj0.Add(pp_5);
                            }

                        }
                        else if (command.Equals("POLYGON_1"))
                        {
                            String id_8 = ReadAWord();
                            String type = mdf.GetType(id_8);
                            Color col_9;
                            Material mate_10 = null;
                            if (type.Equals("Color"))
                                col_9 = mdf.GetColor(id_8);
                            else if (type.Equals("Material"))
                            {
                                mate_10 = mdf.GetMaterial(id_8);
                            }
                            //if ((col_9 == null) && (mate_10 == null))
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [POLYGON_1]ｺﾏﾝﾄﾞ: 存在しないﾏﾃﾘｱﾙIDが指定されています.vs_read_form_unit()");
                                return false;
                            }
                            ArrayList p_11 = Vs_read_points();
                            if (p_11.Count < 3)
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [POLYGON_1]ｺﾏﾝﾄﾞ: 頂点数が3以下です.vs_read_form_unit()");
                                return false;
                            }
                            if (type.Equals("Color"))
                            {
                                VsPolygon pp_12 = new VsPolygon();
                                pp_12.col = col_9;
                                for (int i_13 = 0; i_13 < p_11.Count; i_13++)
                                {
                                    Vector3D ppp_14 = new Vector3D((Vector3D)vertex[((Int32)p_11[i_13])]);
                                    pp_12.pol.AddVertex(ppp_14);
                                }
                                obj0.Add(pp_12);
                            }
                            else
                            {
                                VsPolygon3 pp_15 = new VsPolygon3();
                                pp_15.mate = mate_10;
                                for (int i_16 = 0; i_16 < p_11.Count; i_16++)
                                {
                                    Vector3D ppp_17 = new Vector3D((Vector3D)vertex[((Int32)p_11[i_16])]);
                                    pp_15.pol.AddVertex(ppp_17);
                                }
                                obj0.Add(pp_15);
                            }

                        }
                        else if (command.Equals("POLYLINE"))
                        {
                            String id_18 = ReadAWord();
                            Color col_19 = mdf.GetColor(id_18);
                            if (col_19 == null)
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [POLYLINE]ｺﾏﾝﾄﾞ: 存在しないﾏﾃﾘｱﾙIDが指定されています.vs_read_form_unit()");
                                return false;
                            }
                            ArrayList p_20 = Vs_read_points();
                            if (p_20.Count < 2)
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: [POLYLINE]ｺﾏﾝﾄﾞ: 頂点数が2以下です.vs_read_form_unit()");
                                return false;
                            }
                            for (int i_21 = 0; i_21 < p_20.Count - 1; i_21++)
                            {
                                Vector3D p0_22 = new Vector3D((Vector3D)vertex[((Int32)p_20[i_21])]);
                                Vector3D p1_23 = new Vector3D((Vector3D)vertex[((Int32)p_20[i_21 + 1])]);
                                obj0.Add(new VsSegment(p0_22.x, p0_22.y, p0_22.z, p1_23.x, p1_23.y, p1_23.z, col_19));
                            }
                        }
                        else
                        {
                            System.Console.Out.WriteLine("ｴﾗｰ: 不当なｺﾏﾝﾄﾞ[" + command + "]が現れました.vs_read_form_unit()");
                            return false;
                        }

                    }

                }

            }

            if (message_mode)
            {
                String command_24;
                int c_25;
                System.Console.Out.WriteLine("<FORM UNIT>  NAME:[" + name + "]");
                System.Console.Out.WriteLine("  DEPTH SORT SW:[" + depth_sort_sw + "]  SCALE FACTOR:[" + scale + "]");
                System.Console.Out.WriteLine("NUMBER of VERTEX:[" + vertex.Count + "]");
                System.Console.Out.WriteLine("VERTEX:");
                for (int i_26 = 0; i_26 < vertex.Count; i_26++)
                {
                    String vtxId = DispFormat.Lpad(((Int32)fvno[i_26]).ToString(), 3);
                    if (vtxId.Equals("-99"))
                        vtxId = "   ";
                    System.Console.Out.Write("  " + vtxId + " : ");
                    ((Vector3D)vertex[i_26]).PrintPos();
                    System.Console.Out.WriteLine("");
                }
                obj0.Print();
                System.Console.Out.WriteLine("NUMBER of ELEMENT:" + obj0.element.Count);
                System.Console.Out.WriteLine("-----------------------------------------------\n");
            }

            return true;
        }

        private int Vs_read_vertexs()
        {
            for (int flag = 0; flag == 0; )
            {
                int c = ReadSkipSpace();
                switch (c)
                {
                    case -1:
                        System.Console.Out.WriteLine("ｴﾗｰ: 頂点読み込み中に EOF が表れました.vs_read_vertexs()");
                        return -1;
                    case 35:
                        ReadLine();
                        break;
                    case 86:
                    case 118:
                        int fvnotmp = ReadInteger();
                        Vector3D vtemp;
                        if (Pass("="))
                        {
                            vtemp = ReadVector();
                            if (!Pass(";"))
                                vtemp = null;
                        }
                        else
                        {
                            vtemp = null;
                        }

                        if (vtemp == null)
                        {
                            System.Console.Out.WriteLine("ｴﾗｰ: 頂点記述 Vn=(x,y,z): 文法ｴﾗｰ vs_read_vertexs()");
                            return -1;
                        }
                        int i;
                        for (i = 0; i < vertex.Count; i++)
                        {
                            if (((Int32)fvno[i]) == fvnotmp)
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ: 頂点 V" + fvnotmp + " が2個定義されています.vs_read_vertexs()");
                                return -1;
                            }
                        }
                        for (i = 0; i < vertex.Count; i++)
                        {
                            if (vtemp.Equals((Vector3D)vertex[i]))
                            {
                                System.Console.Out.WriteLine("ｴﾗｰ:座標(" + vtemp.x + "," + vtemp.y + "," + vtemp.z + ")の頂点が2個定義されています(頂点V" + fvnotmp + "とV" + fvno[i] + ").vs_read_vertexs()");
                                return -1;
                            }
                        }
                        fvno.Add(((int)(fvnotmp)));
                        vertex.Add(vtemp);
                        break;
                    case 125:
                        flag = 1;
                        break;
                    default:
                        System.Console.Out.WriteLine("ｴﾗｰ: 頂点読み込み中に記号[" + (char)c + "]が不当に現れました.vs_read_vertexs()\n");
                        return -1;
                }
            }
            return 0;
        }

        private ArrayList Vs_read_points()
        {
            ArrayList ret = new ArrayList();

            int np = 0;

            int vertex_no = 0;

            for (int flag = 0; flag == 0; )
            {
                int c = ReadSkipSpace();
                String temp;
                switch (c)
                {
                    case -1:
                        System.Console.Out.WriteLine("ｴﾗｰ: 描画要素頂点読み込み中に EOF が表れました.vs_read_vertexs()");
                        return null;
                    case 35:
                        temp = ReadLine();
                        break;
                    case 59:
                        flag = 1;
                        break;
                    case 86:
                    case 118:
                        int fvnotmp = ReadInteger();

                        int match = 0;
                        for (int i = 0; i < fvno.Count; i++)
                        {
                            if (fvnotmp == ((Int32)fvno[i]))
                            {
                                match = 1;
                                vertex_no = i;
                                break;
                            }
                        }
                        if (match == 0)
                        {
                            System.Console.Out.WriteLine("ｴﾗｰ: 頂点番号指定 V" + fvnotmp + ": 頂点番号ﾏｯﾁﾝｯｸﾞｴﾗｰ vs_read_points()");
                            return null;
                        }
                        ret.Add(((int)(vertex_no)));
                        break;
                    case 40:
                        Vector3D vtemp = ReadVector2();
                        if (vtemp == null)
                        {
                            System.Console.Out.WriteLine("ｴﾗｰ: 座標指定(,,): 文法ｴﾗｰ.vs_read_points()");
                            return null;
                        }
                        match = 0;
                        for (int i_0 = 0; i_0 < vertex.Count; i_0++)
                        {
                            if (vtemp.Equals((Vector3D)vertex[i_0]))
                            {
                                match = 1;
                                vertex_no = i_0;
                                break;
                            }
                        }
                        if (match == 0)
                        {
                            fvno.Add(((int)(-99)));
                            vertex.Add(vtemp);
                            vertex_no = vertex.Count - 1;
                        }
                        ret.Add(((int)(vertex_no)));
                        break;
                    default:
                        System.Console.Out.WriteLine("ｴﾗｰ: 描画要素頂点読み込みに中に記号[" + (char)c + "]が不当に現れました.vs_read_points()");
                        return null;
                }
            }
            return ret;
        }

        private Vector3D ReadVector2()
        {
            double xtmp = ReadDouble();
            if (!Pass(","))
                return null;
            double ytmp = ReadDouble();
            if (!Pass(","))
                return null;
            double ztmp = ReadDouble();
            if (!Pass(")"))
                return null;

            return new Vector3D(xtmp, ytmp, ztmp);
        }

        private VsObject GetVsObject()
        {
            Matrix44 smat = new Matrix44();
            smat.SetSMat(scale, scale, scale);
            return (VsObject)obj0.Transform(smat);
        }
    }
}