// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{

    using Jp.Maker1.Io.Textfile;
    using System;
    using System.Drawing;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class MaterialDefinitionFile : ReadTextFileOnServer
    {
        public ArrayList idList;

        public ArrayList typeList;

        public ArrayList mateList;

        public MaterialDefinitionFile(string inFileURL)
            : base(inFileURL)
        {
            idList = new ArrayList();
            typeList = new ArrayList();
            mateList = new ArrayList();
            ReadMaterialDefinitionFile();
            for (int i = 0; i < idList.Count; i++)
            {
                GetType(i).Equals("Color");
            }

            Close();
        }

        private void ReadMaterialDefinitionFile()
        {

            //string line = "";


            //while ((line = br.ReadLine()) != null)
            //{

            //    string[] parts = line.Split(new char[] { ' ', ',', '[', ']', '=' });

            //    string[] split = new string[parts.Length];

            //    int j = 0;
            //    for (int i = 0; i < parts.Length; ++i)
            //    {
            //        if (parts[i] != "")
            //            split[j++] = parts[i];
            //    }

            //    switch (split[0][0])
            //    {
            //        case 'c':
            //            LightColor lc = new LightColor(double.Parse(split[3]),double.Parse(split[4]),double.Parse(split[5]));

            //            idList.Add(split[1]);
            //            typeList.Add("Color");
            //            mateList.Add(lc.GetColor());
            //            break;
            //        default:
            //            break;
            //    }
            //}

            //return;

            int n = 0;
            while (true)
            {
                int c = ReadSkipSpace();
                switch (c)
                {
                    case -1:
                        return;
                    case '#':
                        ReadLine();
                        break;
                    case 'M':
                    case 'm':
                        n++;
                        String id = ReadAWord();

                        if (id.Equals(""))
                        {
                            System.Console.Out.WriteLine(n + "番目の定義にIDが設定されていません");
                            return;
                        }
                        if (idList.IndexOf(id) != -1)
                        {
                            System.Console.Out.WriteLine(n + "番目に定義されているIDが重複しています ID=" + id);
                            return;
                        }
                        String order = "DIFFUSE";
                        String subCommand = ReadToKugiri("=").Trim().ToUpper();

                        if (!subCommand.Equals(order))
                        {
                            System.Console.Out.WriteLine(n + "番目の定義に" + order + "パラメータが設定されていません");
                            return;
                        }
                        LightColor lcd = ReadRGB();
                        if (lcd == null)
                        {
                            System.Console.Out.WriteLine(n + "番目の定義の" + order + "パラメータの設定が不正です");
                            return;
                        }
                        order = "SPECULAR";
                        subCommand = ReadToKugiri("=").Trim().ToUpper();
                        if (!subCommand.Equals(order))
                        {
                            System.Console.Out.WriteLine(n + "番目の定義に" + order + "パラメータが設定されていません");
                            return;
                        }
                        LightColor lcs = ReadRGB();
                        if (lcs == null)
                        {
                            System.Console.Out.WriteLine(n + "番目の定義の" + order + "パラメータの設定が不正です");
                            return;
                        }
                        double specularSharpness = ReadDouble();
                        order = "RADIATION";
                        subCommand = ReadToKugiri("=").Trim().ToUpper();
                        if (!subCommand.Equals(order))
                        {
                            System.Console.Out.WriteLine(n + "番目の定義に" + order + "パラメータが設定されていません");
                            return;
                        }
                        LightColor lcr = ReadRGB();
                        if (lcr == null)
                        {
                            System.Console.Out.WriteLine(n + "番目の定義の" + order + "パラメータの設定が不正です");
                            return;
                        }
                        idList.Add(id);
                        typeList.Add("Material");
                        mateList.Add(new Material(lcd, lcs, specularSharpness, lcr));
                        break;
                    case 'C':
                    case 'c':
                        n++;
                        id = ReadAWord();
                        if (id.Equals(""))
                        {
                            System.Console.Out.WriteLine(n + "番目の定義にIDが設定されていません");
                            return;
                        }
                        if (idList.IndexOf(id) != -1)
                        {
                            System.Console.Out.WriteLine(n + "番目に定義されているIDが重複しています ID=" + id);
                            return;
                        }
                        order = "COLOR";
                        subCommand = ReadToKugiri("=").Trim().ToUpper();
                        if (!subCommand.Equals(order))
                        {
                            System.Console.Out.WriteLine(n + "番目の定義に" + order + "パラメータが設定されていません");
                            return;
                        }
                        LightColor lc = ReadRGB();
                        if (lc == null)
                        {
                            System.Console.Out.WriteLine(n + "番目の定義の" + order + "パラメータの設定が不正です");
                            return;
                        }
                        idList.Add(id);
                        typeList.Add("Color");
                        mateList.Add(lc.GetColor());
                        break;
                    default:
                        System.Console.Out.WriteLine("不正なコマンド[" + (char)c + "]が現れました");
                        return;
                }
            }
        }

        public LightColor ReadRGB()
        {
            if (!Pass("["))
                return null;
            double r = ReadDouble();
            if (!Pass(","))
                return null;
            double g = ReadDouble();
            if (!Pass(","))
                return null;
            double b = ReadDouble();
            if (!Pass("]"))
                return null;

            return new LightColor(r, g, b);
        }

        public String GetType(int i)
        {
            return (String)typeList[i];
        }

        public String GetId(int i)
        {
            return (String)idList[i];
        }

        public String GetType(String id)
        {
            String ret = "";
            int i = idList.IndexOf(id);
            if (i != -1)
            {
                ret = GetType(i);
            }
            return ret;
        }

        public Material GetMaterial(String id)
        {
            Material ret = null;
            int i = idList.IndexOf(id);
            if ((i != -1) && (GetType(i).Equals("Material")))
            {
                ret = new Material((Material)mateList[i]);
            }

            return ret;
        }

        public Color GetColor(String id)
        {
            Color ret = Color.FromArgb(0, 0, 0);

            int i = idList.IndexOf(id);
            if (i != -1)
            {
                Color col = (Color)mateList[i];
                if (GetType(i).Equals("Color"))
                {
                    ret = col;
                }
            }
            return ret;
        }
    }
}