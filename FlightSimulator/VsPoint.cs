// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{


    using System;
    using System.Drawing;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class VsPoint : VsElement
    {
        public String type;
        public Color col;
        public Vector3D pos;

        public VsPoint()
        {
            type = "VsPoint";
            col = Color.Black;
            pos = new Vector3D();
        }

        public VsPoint(double x, double y, double z, int r, int g, int b)
        {
            type = "VsPoint";
            col = Color.FromArgb(r, g, b);
            pos = new Vector3D(x, y, z);
        }

        public VsPoint(double x, double y, double z, Color c)
        {
            type = "VsPoint";
            col = c;
            pos = new Vector3D(x, y, z);
        }

        public VsPoint(Vector3D v, Color c)
        {
            type = "VsPoint";
            col = c;
            pos = v;
        }

        public VsPoint(VsPoint p)
        {
            type = "VsPoint";
            col = p.col;
            if (p.pos != null)
                pos = new Vector3D(p.pos);
            else
                pos = null;
        }

        public virtual VsElement Clip2D(Clipper clip)
        {
            VsPoint ret = new VsPoint(this);
            if (ret.pos != null)
            {
                ret.pos = clip.Vs_point_clip2d(ret.pos);
            }
            return ret;
        }

        public virtual VsElement Clip3DF(Clipper clip)
        {
            VsPoint ret = new VsPoint(this);
            if (ret.pos != null)
            {
                ret.pos = clip.Vs_point_clip_3df(ret.pos);
            }
            return ret;
        }

        public virtual String ElemType()
        {
            return type;
        }

        public virtual double Depth()
        {
            if (pos != null)
            {
                return pos.z;
            }
            return 0.0D;
        }

        public virtual void Draw(Graphics g)
        {
            if (pos != null)
            {
               // g.SetColor(col);
                int ix = (int)(pos.x + 0.5D);
                int iy = (int)(pos.y + 0.5D);

               // g.DrawLine(ix, iy, ix, iy);
            }
        }

        public virtual void Complete_draw(Graphics g)
        {
            Draw(g);
        }

        public void DrawWireframe(Graphics g)
        {
            if (pos != null)
            {
               // g.SetColor(Java.Awt.Color.black);
                int ix = (int)(pos.x + 0.5D);
                int iy = (int)(pos.y + 0.5D);

               // g.DrawLine(ix, iy, ix, iy);
            }
        }

        public virtual void Print()
        {
            System.Console.Out.Write(type + "::");
            if (pos != null)
            {
                System.Console.Out.Write(col + "::");
                pos.PrintPos();
            }
            else
            {
                System.Console.Out.Write("null");
            }
            System.Console.Out.WriteLine("");
        }

        public virtual VsElement Project(Projector proj)
        {
            VsPoint ret = new VsPoint(this);
            if (ret.pos != null)
            {
                ret.pos = proj.Project(ret.pos);
            }
            return ret;
        }

        public virtual VsElement Transform(Matrix44 mat)
        {
            VsPoint ret = new VsPoint(this);

            if (ret.pos != null)
            {
                ret.pos = ret.pos.MultMat(mat);
            }
            return ret;
        }

        public virtual BoundingBox BoundingBox()
        {
            return new BoundingBox(pos, pos);
        }

        public virtual void SetColor(Color colIn)
        {
            col = colIn;
        }

        public virtual void SetMaterial(Material mate)
        {
        }
    }
}