// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace FlightSimulator
{

    using Jp.Maker1.Sim.Tools;
    using Jp.Maker1.Util;
    using Jp.Maker1.Vsys3.Tools;
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class RecordData
    {
        public RecordData()
        {
            t = 0.0D;
            dt = 0.0D;
            wpos = new Vector3D();
            roll = new Angle(1);
            pitch = new Angle(1);
            yaw = new Angle(0);
            vcDash = new Vector3D();
            omega = new Vector3D();
            d_vc = new Vector3D();
            d_omega = new Vector3D();
            f_m = new Vector3D();
        }

        public double t;
        public double dt;
        public Vector3D wpos;
        public Angle roll;
        public Angle pitch;
        public Angle yaw;
        public Vector3D vcDash;
        public Vector3D omega;
        public Vector3D d_vc;
        public Vector3D d_omega;
        public double theta;
        public Vector3D f_m;
        public double delta_e;
        public double delta_a_r;
        public double delta_a_l;
        public double delta_r;
        public double delta_t_flap;
        public int flag_gear;
        public int flag_land;
        public double thrust_m;
        public double throttle_pos;

        public static void PrintHeadder(String version)
        {
            System.Console.Out.WriteLine("---------------------------------------------------------------");
            System.Console.Out.WriteLine(" Title : " + Jp.Maker1.Fsim.FsimConst.title);
            System.Console.Out.WriteLine(" Version : " + version);
            System.Console.Out.WriteLine(" Author : " + Jp.Maker1.Fsim.FsimConst.author);
            System.Console.Out.WriteLine(" Reffer URL : " + Jp.Maker1.Fsim.FsimConst.url);
            System.Console.Out.WriteLine(" Simulation Date : " + DateTime.Now);
            System.Console.Out.WriteLine("---------------------------------------------------------------");
            System.Console.Out.Write(" T[s],ƒ¢T[msec],XE[m],YE[m],ZE[m],ƒ³[deg],ƒ¦[deg],ƒµ[deg],");
            System.Console.Out.Write("U'[m/s],V'[m/s],W'[m/s],P[deg/s],Q[deg/s],R[deg/s],");
            System.Console.Out.Write("dU/dt[m/s2],dV/dt[m/s2],dW/dt[m/s2],");
            System.Console.Out.Write("dP/dt[deg/s2],dQ/dt[deg/s2],dR/dt[deg/s2],ƒÆ[deg],");
            System.Console.Out.Write("Fx/m[m/s2],Fy/m[m/s2],Fz/m[m/s2],");
            System.Console.Out.Write("ƒÂe[deg],ƒÂa(R)[deg],ƒÂa(L)[deg],ƒÂr[deg],ƒÂflap[deg],");
            System.Console.Out.Write("GEAR,LAND,T/m[m/s2],THR-POS");
            System.Console.Out.WriteLine("");
        }

        public void Print()
        {
            System.Console.Out.WriteLine(ToString());
        }

        public override String ToString()
        {
            String ret = "";

            ret = DispFormat.DoubleFormat(t, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(dt * 1000.0D, 1);
            ret = ret + ", " + DispFormat.DoubleFormat(wpos.x, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(wpos.y, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(wpos.z, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(roll.GetValue()), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(pitch.GetValue()), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(yaw.GetValue()), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(vcDash.x, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(vcDash.y, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(vcDash.z, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(omega.x), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(omega.y), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(omega.z), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(d_vc.x, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(d_vc.y, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(d_vc.z, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(d_omega.x), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(d_omega.y), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(d_omega.z), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(theta), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(f_m.x, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(f_m.y, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(f_m.z, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(delta_e), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(delta_a_r), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(delta_a_l), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(delta_r), 3);
            ret = ret + ", " + DispFormat.DoubleFormat(MathTool.RadToDeg(delta_t_flap), 3);
            ret = ret + ", " + flag_gear;
            ret = ret + ", " + flag_land;
            ret = ret + ", " + DispFormat.DoubleFormat(thrust_m, 3);
            ret = ret + ", " + DispFormat.DoubleFormat(throttle_pos, 3);

            return ret;
        }

        public void Record(double tIn, double dtIn, AirPlane ap)
        {
            t = tIn;
            dt = dtIn;
            wpos.SetVec(ap.pMotion.wpos);
            roll.Set(ap.pMotion.roll);
            pitch.Set(ap.pMotion.pitch);
            yaw.Set(ap.pMotion.yaw);
            vcDash.SetVec(ap.pMotion.vcDash);
            omega.SetVec(ap.pMotion.omega);
            d_vc.SetVec(ap.pMotion.d_vc);
            d_omega.SetVec(ap.pMotion.d_omega);
            Bearing btemp = new Bearing(ap.pMotion.wv);
            theta = btemp.pitch.GetValue();
            f_m.SetVec(ap.pMotion.force.SclProd(1.0D / ap.inp.m));
            if (ap.elevator[0, 0].type != 0)
                delta_e = ap.elevator[0, 0].delta;
            else
            {
                delta_e = 0.0D;
            }
            if (ap.aileron[0, 0].type != 0)
                delta_a_r = ap.aileron[0, 0].delta;
            else
            {
                delta_a_r = 0.0D;
            }
            if (ap.aileron[0, 1].type != 0)
                delta_a_l = ap.aileron[0, 1].delta;
            else
            {
                delta_a_l = 0.0D;
            }
            if (ap.rudder[0, 0].type != 0)
                delta_r = ap.rudder[0, 0].delta;
            else
            {
                delta_r = 0.0D;
            }
            if (ap.t_flap[0, 0].type != 0)
                delta_t_flap = ap.t_flap[0, 0].delta;
            else
            {
                delta_t_flap = 0.0D;
            }
            flag_gear = ap.flag_landing_gear;
            flag_land = ap.flag_land;
            thrust_m = (ap.t_force.Length() / ap.inp.m);
            throttle_pos = ap.cif.throttle_pos;
        }
    }
}