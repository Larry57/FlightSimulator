// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{

    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;


    public class Projector
    {
        public double screenXOffset;
        public double screenYOffset;
        public double screenXSize;
        public double screenYSize;
        public double viewXAngle;
        public double viewYAngle;
        public double screenDist;
        public double zoom;

        public Projector()
        {
            screenXOffset = 0.0D;
            screenYOffset = 0.0D;
            screenXSize = 300.0D;
            screenYSize = 300.0D;
            viewXAngle = MathTool.DegToRad(45.0D);
            screenDist = CalcScreenDist(screenXSize, viewXAngle);
            viewYAngle = CalcViewAngle(screenXSize, screenDist);
            zoom = 1.0D;
        }

        public Projector(double screenXSize_0, double screenYSize_1, double viewXAngle_2)
        {
            screenXOffset = 0.0D;
            screenYOffset = 0.0D;
            screenXSize = screenXSize_0;
            screenYSize = screenYSize_1;
            viewXAngle = viewXAngle_2;
            screenDist = CalcScreenDist(screenXSize_0, viewXAngle_2);
            viewYAngle = CalcViewAngle(screenXSize_0, screenDist);
            zoom = 1.0D;
        }

        public Projector(double screenXOffset_0, double screenYOffset_1, double screenXSize_2, double screenYSize_3, double viewXAngle_4)
        {
            screenXOffset = screenXOffset_0;
            screenYOffset = screenYOffset_1;
            screenXSize = screenXSize_2;
            screenYSize = screenYSize_3;
            viewXAngle = viewXAngle_4;
            screenDist = CalcScreenDist(screenXSize_2, viewXAngle_4);
            viewYAngle = CalcViewAngle(screenXSize_2, screenDist);
            zoom = 1.0D;
        }

        public void SetVerticalParamer(double screenXOffset_0, double screenYOffset_1, double screenXSize_2, double screenYSize_3, double viewYAngle_4)
        {
            screenXOffset = screenXOffset_0;
            screenYOffset = screenYOffset_1;
            screenXSize = screenXSize_2;
            screenYSize = screenYSize_3;
            viewYAngle = viewYAngle_4;
            screenDist = CalcScreenDist(screenYSize_3, viewYAngle_4);
            viewXAngle = CalcViewAngle(screenXSize_2, screenDist);
            zoom = 1.0D;
        }

        public void SetZoom(double zoomRatio)
        {
            zoom = zoomRatio;
        }

        private double CalcScreenDist(double screenSize, double viewAngle)
        {
            return screenSize * 0.5D / System.Math.Tan(viewAngle / 2.0D);
        }

        private double CalcViewAngle(double screenSize, double screenDist_0)
        {
            return System.Math.Atan(screenSize * 0.5D / screenDist_0) * 2.0D;
        }

        public void Print()
        {
            System.Console.Out.WriteLine("Offset = (" + screenXOffset + " X " + screenYOffset + ")");
            System.Console.Out.WriteLine("Size = " + screenXSize + " X " + screenYSize);
            System.Console.Out.WriteLine("Dist = " + screenDist); System.Console.Out.WriteLine("V.A. = " + MathTool.RadToDeg(viewXAngle) + "[deg] X " + MathTool.RadToDeg(viewYAngle) + "[deg]");
        }

        public Vector3D Project(Vector3D v)
        {
            Vector3D ret = new Vector3D();

            if (v.z != 0.0D)
            {
                ret.x = (screenXOffset + (screenXSize - 1.0D) / 2.0D + v.x / v.z * screenDist * zoom);
                ret.y = (screenYOffset + (screenYSize - 1.0D) / 2.0D - v.y / v.z * screenDist * zoom);
                ret.z = v.z;
            }
            else
            {
                ret.x = 0.0D;
                ret.y = 0.0D;
                ret.z = 0.0D;
            }
            return ret;
        }

        public double SizeProject(double size, Vector3D v)
        {
            double dist = v.Length();
            double ret;

            if (dist != 0.0D)
                ret = size / dist * screenDist * zoom;
            else
            {
                ret = 0.0D;
            }
            return ret;
        }

        public double ProjectRaitio(double size, Vector3D v)
        {
            double dist = v.Length();
            double ret;

            if (dist != 0.0D)
                ret = size / dist * zoom;
            else
            {
                ret = 0.0D;
            }
            return ret;
        }
    }
}