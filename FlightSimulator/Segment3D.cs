// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Vsys3.Tools
{

    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class Segment3D
    {
        public Vector3D p0;
        public Vector3D p1;

        public Segment3D()
        {
            p0 = new Vector3D(0.0D, 0.0D, 0.0D);
            p1 = new Vector3D(1.0D, 0.0D, 0.0D);
        }

        public Segment3D(double x0, double y0, double z0, double x1, double y1, double z1)
        {
            p0 = new Vector3D(x0, y0, z0);
            p1 = new Vector3D(x1, y1, z1);
        }

        public Segment3D(Segment3D seg)
        {
            p0 = new Vector3D(seg.p0);
            p1 = new Vector3D(seg.p1);
        }

        public Segment3D(Vector3D p0_0, Vector3D p1_1)
        {
            p0 = new Vector3D(p0_0);
            p1 = new Vector3D(p1_1);
        }

        public int Ix0()
        {
            return (int)(p0.x + 0.5D);
        }

        public int Ix1()
        {
            return (int)(p1.x + 0.5D);
        }

        public int Iy0()
        {
            return (int)(p0.y + 0.5D);
        }

        public int Iy1()
        {
            return (int)(p1.y + 0.5D);
        }

        public Vector3D LinearIntarp(double t)
        {
            Vector3D ret = p0.SclProd(1.0D - t);
            Vector3D temp = p1.SclProd(t);
            return ret.Add(temp);
        }

        public void Print()
        {
            p0.PrintPos();
            System.Console.Out.Write("Å®");
            p1.PrintPos();
            System.Console.Out.WriteLine("");
        }

        public Segment3D Project(Projector proj)
        {
            Segment3D ret = new Segment3D(proj.Project(p0), proj.Project(p1));
            return ret;
        }

        public double SegLength()
        {
            Vector3D temp = p1.Sub(p0);
            return temp.Length();
        }

        public void SetP0(Vector3D p)
        {
            p0.SetVec(p);
        }

        public void SetP1(Vector3D p)
        {
            p1.SetVec(p);
        }

        public void SetSeg(double x0, double y0, double z0, double x1, double y1, double z1)
        {
            p0 = new Vector3D(x0, y0, z0);
            p1 = new Vector3D(x1, y1, z1);
        }

        public Segment3D Transform(Matrix44 mat)
        {
            return new Segment3D(p0.MultMat(mat), p1.MultMat(mat));
        }

        public BoundingBox BoundingBox()
        {
            BoundingBox ret = new BoundingBox();
            ret.Fusion(p0);
            ret.Fusion(p1);
            return ret;
        }

        public Vector3D Vector()
        {
            return new Vector3D(p1.Sub(p0));
        }

        public double LengthPerpendicular(Vector3D p)
        {
            Vector3D v1 = Vector();
            Vector3D v2 = new Vector3D(p.Sub(p0));

            double d = v1.Length();
            double c = v2.Length();
            if (d == 0.0D)
                return c;
            double a = v1.DotProd(v2) / d;
            return Math.Sqrt(c * c - a * a);
        }
    }
}