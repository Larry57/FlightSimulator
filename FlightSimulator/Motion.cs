// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 11/05/19 19:45    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
namespace Jp.Maker1.Sim.Tools
{

    using Jp.Maker1.Util;
    using Jp.Maker1.Vsys3.Tools;
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.CompilerServices;

    public class Motion
    {
        public readonly int POS_INTEGRAL_FORWARD;
        public readonly int POS_INTEGRAL_CURRENT;
        public int pos_integral_mode;
        public Vector3D wpos;
        public Angle roll;
        public Angle pitch;
        public Angle yaw;
        public Vector3D wv;
        public double droll;
        public double dpitch;
        public double dheading;
        public Vector3D ow;
        public Vector3D ov;
        public Matrix44 wom;
        public Matrix44 owm;
        public double deltaT;
        public Vector3D wpos_b;
        protected internal Vector3D wv_b;
        protected internal double dpitch_b;
        protected internal double droll_b;
        protected internal double dyaw_b;

        public Motion(double xIn, double yIn, double zIn, double rollIn,
                double pitchIn, double yawIn, double ovxIn, double ovyIn,
                double ovzIn)
        {
            POS_INTEGRAL_FORWARD = 0;
            POS_INTEGRAL_CURRENT = 1;
            pos_integral_mode = 0;
            wpos = new Vector3D(xIn, yIn, zIn);
            wpos_b = new Vector3D(xIn, yIn, zIn);

            roll = new Angle(rollIn, 1);
            pitch = new Angle(pitchIn, 1);
            yaw = new Angle(yawIn, 0);

            ov = new Vector3D(ovxIn, ovyIn, ovzIn);

            ow = new Vector3D(0.0D, 0.0D, 0.0D);

            wv = new Vector3D(0.0D, 0.0D, 0.0D);
            wv_b = new Vector3D(0.0D, 0.0D, 0.0D);

            dpitch = (droll = dheading = 0.0D);

            Update(0.0D);
        }

        public void Update(double dt)
        {
            deltaT = dt;

            double roll_t = roll.GetValue();
            double pitch_t = pitch.GetValue();
            double yaw_t = yaw.GetValue();

            double cr = System.Math.Cos(roll_t);
            double sr = System.Math.Sin(roll_t);
            double cp = System.Math.Cos(pitch_t);
            double sp = System.Math.Sin(pitch_t);
            double ch = System.Math.Cos(yaw_t);
            double sh = System.Math.Sin(yaw_t);

            wv_b.SetVec(wv);
            wv.x = (ov.x * (cr * ch + sr * sp * sh) - ov.y
                    * (sr * ch - cr * sp * sh) + ov.z * (cp * sh));
            wv.y = (-(ov.x * (-sr * cp) - ov.y * (cr * cp) + ov.z
                    * sp));
            wv.z = (ov.x * (-cr * sh + sr * sp * ch) - ov.y
                    * (-sr * sh - cr * sp * ch) + ov.z * (cp * ch));

            dpitch_b = dpitch;
            droll_b = droll;
            dyaw_b = dheading;

            if (pitch_t == 1.570796326794897D)
            {
                droll = 0.0D;
                dpitch = (ow.x + ow.y);
                dheading = (-ow.z);
            }
            else if (pitch_t == -1.570796326794897D)
            {
                droll = 0.0D;
                dpitch = (ow.x + ow.y);
                dheading = ow.z;
            }
            else
            {
                droll = (-(-ow.z - ow.x * sr * sp / cp - ow.y
                        * cr * sp / cp));
                dpitch = (-(-ow.x * cr + ow.y * sr));
                dheading = (-(-ow.x * sr / cp - ow.y * cr / cp));
            }

            wpos_b.SetVec(wpos);

            if (pos_integral_mode == 0)
            {
                wpos.x += 0.5D * (3.0D * wv.x - wv_b.x) * dt;
                wpos.y += 0.5D * (3.0D * wv.y - wv_b.y) * dt;
                wpos.z += 0.5D * (3.0D * wv.z - wv_b.z) * dt;
            }
            else
            {
                wpos.x += 0.5D * (wv.x + wv_b.x) * dt;
                wpos.y += 0.5D * (wv.y + wv_b.y) * dt;
                wpos.z += 0.5D * (wv.z + wv_b.z) * dt;
            }

            if (pos_integral_mode == 0)
            {
                roll.Add(droll * dt);
                pitch.Add(dpitch * dt);
                yaw.Add(dheading * dt);
            }
            else
            {
                roll.Add(droll_b * dt);
                pitch.Add(dpitch_b * dt);
                yaw.Add(dyaw_b * dt);
            }

            if (pitch.GetValue() == 1.570796326794897D)
            {
                yaw.Sub(roll.GetValue(0));
                roll.SetValue(0.0D);
            }
            if (pitch.GetValue() == -1.570796326794897D)
            {
                yaw.Add(roll.GetValue(0));
                roll.SetValue(0.0D);
            }
            if (pitch.GetValue() > 1.570796326794897D)
            {
                pitch.SetValue(Math.PI - pitch.GetValue());
                yaw.Reverse();
                roll.Reverse();
            }
            if (pitch.GetValue() < -1.570796326794897D)
            {
                pitch.SetValue(-Math.PI - pitch.GetValue());
                yaw.Reverse();
                roll.Reverse();
            }

            SetCoodinateConvertMatrix();
        }

        public void SetCoodinateConvertMatrix()
        {
            Matrix44 tMat = new Matrix44();
            Matrix44 rXMat = new Matrix44();
            Matrix44 rYMat = new Matrix44();
            Matrix44 rZMat = new Matrix44();

            tMat.SetTMat(-wpos.x, -wpos.y, -wpos.z);
            rYMat.SetRyMat(-yaw.GetValue());
            rXMat.SetRxMat(-pitch.GetValue());
            rZMat.SetRzMat(-roll.GetValue());
            wom = tMat.MultMat(rYMat).MultMat(rXMat).MultMat(rZMat);

            tMat.SetTMat(wpos.x, wpos.y, wpos.z);
            rYMat.SetRyMat(yaw.GetValue());
            rXMat.SetRxMat(pitch.GetValue());
            rZMat.SetRzMat(roll.GetValue());
            owm = rZMat.MultMat(rXMat).MultMat(rYMat).MultMat(tMat);
        }

        public String ToString1()
        {
            return "(x,y,z)=(" + DispFormat.DoubleFormat(wpos.x, 1) + ","
                    + DispFormat.DoubleFormat(wpos.y, 1) + ","
                    + DispFormat.DoubleFormat(wpos.z, 1)
                    + ") (roll,pitch,yaw)=("
                    + DispFormat.DoubleFormat(roll.GetValue(), 1) + ","
                    + DispFormat.DoubleFormat(pitch.GetValue(), 1) + ","
                    + DispFormat.DoubleFormat(yaw.GetValue(), 1) + ")";
        }

        public String ToString2()
        {
            return "(Vx,Vy,Vz)=(" + DispFormat.DoubleFormat(ov.x, 1) + ","
                    + DispFormat.DoubleFormat(ov.y, 1) + ","
                    + DispFormat.DoubleFormat(ov.z, 1) + ") (q,r,p)=("
                    + DispFormat.DoubleFormat(ow.x, 1) + ","
                    + DispFormat.DoubleFormat(ow.y, 1) + ","
                    + DispFormat.DoubleFormat(ow.z, 1) + ")";
        }

        public String ToString3()
        {
            return "(roll, pitchm yaw)=(" + DispFormat.DoubleFormat(MathTool.RadToDeg(roll.GetValue()), 1) + DispFormat.DoubleFormat(MathTool.RadToDeg(pitch.GetValue()), 1) + DispFormat.DoubleFormat(MathTool.RadToDeg(yaw.GetValue()), 1) + ")[deg]";
        }
    }
}